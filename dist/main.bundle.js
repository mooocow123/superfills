class Fs1{readFileSync(e,r=(e,r)=>{}){let t=null;const s=new XMLHttpRequest;return s.open("GET",e,!1),s.send(),200==s.status||304==s.status?(t=s.responseText,r(null,t)):(t=s.status,r(t,null)),t}promises={readFile(e,u=(e,r)=>{}){return new Promise((r,t)=>{const s=new XMLHttpRequest;s.open("get",e,!0),s.onload=()=>{var e=s.status;200==e||304==e?(u(null,s.response),r(s.response)):(u(s.status,null),t(e))},s.send()})}};constructor(){for(var key in this.promises)eval("this."+key+' = this.promises["'+key+'"];')}}let requireroutes={"@node":{fs:new Fs1}};function webrequire(e){for(var r in requireroutes){var t=requireroutes[r].constructor==={}.constructor,s=e.split("/"),u=void 0===requireroutes[r].main,o=requireroutes.hasOwnProperty(s[0])&&requireroutes[s[0]].hasOwnProperty(s[1]);if(r===e&&!t)return requireroutes[r];if(t&&r===e&&u)return requireroutes[r];if(t&&r===e&&!u)return requireroutes[r].main;if(o)return requireroutes[s[0]][s[1]]}}const require=webrequire;class requireModule{id=null;get exports(){return requireroutes[this.id.toString()]}set exports(e){requireroutes[this.id.toString()]=e}}function preparedModule(e,r=0){return e.id=r,requireroutes[r.toString()]="Cow Mother",e}const module=preparedModule(new requireModule,0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLmpzIiwibW9kdWxlcy5qcyJdLCJuYW1lcyI6WyJGczEiLCJyZWFkRmlsZVN5bmMiLCJuYW1lIiwiZnVuYyIsInN0YXQiLCJyZXMiLCJsZXQiLCJyZXN1bHQiLCJ4bWxodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsInByb21pc2VzIiwicmVhZEZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhociIsIm9ubG9hZCIsInJlc3BvbnNlIiwiY29uc3RydWN0b3IiLCJrZXkiLCJ0aGlzIiwiZXZhbCIsInJlcXVpcmVyb3V0ZXMiLCJAbm9kZSIsImZzIiwid2VicmVxdWlyZSIsImlzanNvbiIsInNsYXNoc3BsaXQiLCJzcGxpdCIsIm5vbWFpbiIsIm1haW4iLCJoYXNkYXQiLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJyZXF1aXJlTW9kdWxlIiwiaWQiLCJleHBvcnRzIiwidG9TdHJpbmciLCJ2YWwiLCJwcmVwYXJlZE1vZHVsZSIsIm1vZCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6Ik1BQU1BLElBQ0ZDLGFBQWFDLEVBQU1DLEVBQUssQ0FBQ0MsRUFBTUMsUUFDM0JDLElBQUlDLEVBQVMsS0FDYixNQUFNQyxFQUFVLElBQUlDLGVBV3BCLE9BVkFELEVBQVFFLEtBQUssTUFBT1IsR0FBQUEsR0FDcEJNLEVBQVFHLE9BQ1ksS0FBaEJILEVBQVFJLFFBQStCLEtBQWhCSixFQUFRSSxRQUNqQ0wsRUFBU0MsRUFBUUssYUFDakJWLEVBQUssS0FBTUksS0FHVEEsRUFBU0MsRUFBUUksT0FDakJULEVBQUtJLEVBQVEsT0FFVkEsRUFFWE8sU0FBVyxDQUNQQyxTQUFTYixFQUFNQyxFQUFLLENBQUNDLEVBQU1DLFFBQ3ZCLE9BQU8sSUFBSVcsUUFBUSxDQUFDQyxFQUFTQyxLQUN6QixNQUFNQyxFQUFNLElBQUlWLGVBQ2hCVSxFQUFJVCxLQUFLLE1BQU9SLEdBQUFBLEdBQ2hCaUIsRUFBSUMsT0FBUyxLQUNULElBQU1SLEVBQVNPLEVBQUlQLE9BQ0wsS0FBVkEsR0FBMkIsS0FBVkEsR0FDakJULEVBQUssS0FBTWdCLEVBQUlFLFVBQ2ZKLEVBQVFFLEVBQUlFLFlBRVpsQixFQUFLZ0IsRUFBSVAsT0FBUSxNQUNqQk0sRUFBT04sS0FHZk8sRUFBSVIsV0FJaEJXLGNBQ0ksSUFBS2hCLElBQUlpQixPQUFPQyxLQUFLVixTQUNqQlcsS0FBSyxRQUFVRixJQUFNLHFCQUF1QkEsSUFBTSxRQ25DOURqQixJQUFJb0IsY0FBZ0IsQ0FDaEJDLFFBQVMsQ0FDTEMsR0FBTSxJQUFJNUIsTUFJbEIsU0FBUzZCLFdBQVczQixHQUNoQixJQUFLSSxJQUFJaUIsS0FBT0csY0FBZSxDQUMzQnBCLElBQUl3QixFQUFTSixjQUFjSCxHQUFLRCxjQUFnQixHQUFLQSxZQUNqRFMsRUFBYTdCLEVBQUs4QixNQUFNLEtBQ3hCQyxPQUFBQSxJQUFTUCxjQUFjSCxHQUFXVyxLQUNsQ0MsRUFBU1QsY0FBY1UsZUFBZUwsRUFBVyxLQUFPTCxjQUFjSyxFQUFXLElBQUlLLGVBQWVMLEVBQVcsSUFDbkgsR0FBSVIsSUFBUXJCLElBQVM0QixFQUNqQixPQUFPSixjQUFjSCxHQUVwQixHQUFJTyxHQUFVUCxJQUFRckIsR0FBUStCLEVBQy9CLE9BQU9QLGNBQWNILEdBRXBCLEdBQUlPLEdBQVVQLElBQVFyQixJQUFTK0IsRUFDaEMsT0FBT1AsY0FBY0gsR0FBV1csS0FFL0IsR0FBSUMsRUFDTCxPQUFPVCxjQUFjSyxFQUFXLElBQUlBLEVBQVcsS0FLM0QsTUFBTU0sUUFBVVIsaUJBR1ZTLGNBQ0ZDLEdBQUssS0FDTEMsY0FDSSxPQUFPZCxjQUFjRixLQUFLZSxHQUFHRSxZQUVqQ0QsWUFBWUUsR0FDUmhCLGNBQWNGLEtBQUtlLEdBQUdFLFlBQWNDLEdBSTVDLFNBQVNDLGVBQWVDLEVBQUtMLEVBQUcsR0FHNUIsT0FGQUssRUFBSUwsR0FBS0EsRUFDVGIsY0FBY2EsRUFBR0UsWUFBYyxhQUN4QkcsRUFHWCxNQUFNQyxPQUFTRixlQUFlLElBQUlMLGNBQWlCIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnMxIHtcclxuICAgIHJlYWRGaWxlU3luYyhuYW1lLCBmdW5jPShzdGF0LCByZXMpID0+IHt9KSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhtbGh0dHAub3BlbihcIkdFVFwiLCBuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgeG1saHR0cC5zZW5kKCk7XHJcbiAgICAgICAgaWYgKHhtbGh0dHAuc3RhdHVzPT0yMDAgfHwgeG1saHR0cC5zdGF0dXM9PTMwNCkge1xyXG4gICAgICAgICAgcmVzdWx0ID0geG1saHR0cC5yZXNwb25zZVRleHQ7XHJcbiAgICAgICAgICBmdW5jKG51bGwsIHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB4bWxodHRwLnN0YXR1cztcclxuICAgICAgICAgICAgZnVuYyhyZXN1bHQsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcHJvbWlzZXMgPSB7XHJcbiAgICAgICAgcmVhZEZpbGUobmFtZSwgZnVuYz0oc3RhdCwgcmVzKSA9PiB7fSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcclxuICAgICAgICAgICAgICAgIHhoci5vcGVuKCdnZXQnLCBuYW1lLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSB4aHIuc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDAgfHwgc3RhdHVzID09IDMwNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jKG51bGwsIHhoci5yZXNwb25zZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuYyh4aHIuc3RhdHVzLCBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3Qoc3RhdHVzKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5wcm9taXNlcykge1xyXG4gICAgICAgICAgICBldmFsKCd0aGlzLicgKyBrZXkgKyAnID0gdGhpcy5wcm9taXNlc1tcIicgKyBrZXkgKyAnXCJdOycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vIGlmIHdlIHdhbnQgbW9kdWxlcyB0byBhY3R1YWxseSB3b3JrLCB3ZSdsbCBoYXZlIHRvIGltcG9ydCB0aGVtIGhlcmUuXHJcblxyXG5sZXQgcmVxdWlyZXJvdXRlcyA9IHtcclxuICAgIFwiQG5vZGVcIjoge1xyXG4gICAgICAgIFwiZnNcIjogbmV3IEZzMSgpXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiB3ZWJyZXF1aXJlKG5hbWUpIHtcclxuICAgIGZvciAobGV0IGtleSBpbiByZXF1aXJlcm91dGVzKSB7XHJcbiAgICAgICAgbGV0IGlzanNvbiA9IHJlcXVpcmVyb3V0ZXNba2V5XS5jb25zdHJ1Y3RvciA9PT0gKHt9KS5jb25zdHJ1Y3RvclxyXG4gICAgICAgIGxldCBzbGFzaHNwbGl0ID0gbmFtZS5zcGxpdCgnLycpXHJcbiAgICAgICAgbGV0IG5vbWFpbiA9IHJlcXVpcmVyb3V0ZXNba2V5XVsnbWFpbiddID09PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGhhc2RhdCA9IHJlcXVpcmVyb3V0ZXMuaGFzT3duUHJvcGVydHkoc2xhc2hzcGxpdFswXSkgJiYgcmVxdWlyZXJvdXRlc1tzbGFzaHNwbGl0WzBdXS5oYXNPd25Qcm9wZXJ0eShzbGFzaHNwbGl0WzFdKTtcclxuICAgICAgICBpZiAoa2V5ID09PSBuYW1lICYmICFpc2pzb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmVyb3V0ZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNqc29uICYmIGtleSA9PT0gbmFtZSAmJiBub21haW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmVyb3V0ZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNqc29uICYmIGtleSA9PT0gbmFtZSAmJiAhbm9tYWluKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlcm91dGVzW2tleV1bJ21haW4nXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGFzZGF0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlcm91dGVzW3NsYXNoc3BsaXRbMF1dW3NsYXNoc3BsaXRbMV1dO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgcmVxdWlyZSA9IHdlYnJlcXVpcmU7XHJcblxyXG4vLyBET0VTIFdPUktcclxuY2xhc3MgcmVxdWlyZU1vZHVsZSB7XHJcbiAgICBpZCA9IG51bGw7XHJcbiAgICBnZXQgZXhwb3J0cygpIHtcclxuICAgICAgICByZXR1cm4gcmVxdWlyZXJvdXRlc1t0aGlzLmlkLnRvU3RyaW5nKCldO1xyXG4gICAgfVxyXG4gICAgc2V0IGV4cG9ydHModmFsKSB7XHJcbiAgICAgICAgcmVxdWlyZXJvdXRlc1t0aGlzLmlkLnRvU3RyaW5nKCldID0gdmFsO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVwYXJlZE1vZHVsZShtb2QsIGlkPTApIHtcclxuICAgIG1vZC5pZCA9IGlkO1xyXG4gICAgcmVxdWlyZXJvdXRlc1tpZC50b1N0cmluZygpXSA9ICdDb3cgTW90aGVyJztcclxuICAgIHJldHVybiBtb2Q7XHJcbn1cclxuXHJcbmNvbnN0IG1vZHVsZSA9IHByZXBhcmVkTW9kdWxlKG5ldyByZXF1aXJlTW9kdWxlKCksIDApOyJdfQ==
